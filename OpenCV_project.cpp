//#include <iostream>
  //컴퓨터는 컬러인식을 못하기 때문에, 그레이스케일을 사용한다.
//extern void show_code2();	//현재 파일에 없으니, 다른 파일에서 찾아오세요.
//extern void show_code4(); 
//extern void show_code3_1();
//extern void show_code3_7();
//extern void show_code3_8();
//extern void show_code3_9();
//extern void show_code3_10();
//extern void show_code3_11();
//extern void show_code3_12();
//extern void show_camera();
//extern void show_movie();
//extern void show_video_record();
//extern void show_draw_lines();
//extern void show_draw_polygons();
//extern void show_draw_text();
//extern void show_draw_center();
//extern void keyboard_event();
//extern void mouse_event();
//extern void trackbar_event();
//extern void mask_setTo();
//extern void mask_copyTo();
//extern void time_inverse();
//extern void example();
//extern void brightness();
//extern void brightness2();
//extern void brightness3();
//extern void show_hit();
//extern void histogram_stretching();
//extern void operating();
//extern void arithmatic1();
//extern void arithmatic2();
//extern void logical();
//extern void filter_embossing();
//extern void filter_bluring();
//extern void fliter_GaussianBlur();
//extern void filter_unshar_mask();
//extern void noise_gaussian();
//extern void filter_bilateral();
//extern void filter_median();
//extern void affine_transform();
//extern void affine_translation();
//extern void affine_resize();
//extern void affine_rotation();
//extern void affine_flip();
//extern void perspective();
//extern void sobel_edge();
//extern void canny_edge();
//extern void hought_lines();
//extern void hough_line_segments();
//extern void hough_circles();
//extern void color_inverse();
//extern void color_grayscale();
//extern void color_split();
//extern void color_equalizerHist();
//extern void using_imRange();
//extern void using_threashold();
//extern void adaptive_threshold();
//extern void erode_dilate();
//extern void open_close();
//extern void detect_edge_by_mouse();
//extern void labeling_base();
//extern void solve_problem3();
//extern void solve_problem4();
//extern void labeling_stats();
//extern void contours_basis();
//extern void find_polygon();
//extern void tmeplate_maching();
//extern void detect_face();
//extern void do_knn_machine_learning();
//extern void detect_dnn_face();


//int main()
//{
	//show_code2();
	//show_code3_1();
	//show_code3_7();
	//show_code4();
	//show_code3_8();
	//show_code3_9();
	//show_code3_10();
	//show_code3_11();
	//show_code3_12();
	//show_camera();
	//show_movie();
	//show_video_record();
	//show_draw_lines();
	//show_draw_polygons();
	//show_draw_text();
	//show_draw_center();
	//keyboard_event();
	//mouse_event();
	//trackbar_event();
	//mask_setTo();
	//mask_copyTo();
	//time_inverse();
	//example();
	//brightness();
	//brightness2();
	//brightness3();
	//show_hist();
	//show_hit();
	//histogram_stretching();
	//operating();
	//arithmatic1();
	//arithmatic2();
	//logical();
	//filter_embossing(); 
	//filter_bluring();
	//fliter_GaussianBlur();
	//filter_unshar_mask();
	//noise_gaussian();
	//filter_bilateral();
	//filter_median();
	//affine_transform();
	//affine_translation();
	//affine_resize();
	//affine_rotation();
	//affine_flip();
	//perspective();
	//sobel_edge();
	//canny_edge();
	//hought_lines();
	//hough_line_segments();
	//hough_circles();
	//color_inverse();
	//color_grayscale();
	//color_split();
	//color_equalizerHist();
	//using_imRange();
	//using_threashold();
	//adaptive_threshold();
	//erode_dilate();
	//open_close();
	//detect_edge_by_mouse();
	//labeling_base();
	//solve_problem3();
	//solve_problem4();
	//labeling_stats();
	//contours_basis();
	//find_polygon();
	//tmeplate_maching();
	//detect_face();
	//do_knn_machine_learning();
	//detect_dnn_face();
//	return 0;
//}
